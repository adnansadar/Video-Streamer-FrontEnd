{"ast":null,"code":"import streams from \"../apis/streams\";\nimport { SIGN_IN, SIGN_OUT, CREATE_STREAM, FETCH_STREAMS, FETCH_STREAM, DELETE_STREAM, EDIT_STREAM } from \"../actions/types\";\nimport { useHistory } from \"react-router-dom\";\nexport const signIn = userId => {\n  return {\n    type: SIGN_IN,\n    payload: userId\n  };\n};\nexport const signOut = () => {\n  return {\n    type: SIGN_OUT\n  };\n};\nexport const createStream = formValues => {\n  var _s = $RefreshSig$();\n\n  return _s(async (dispatch, getState) => {\n    _s();\n\n    let history = useHistory();\n    const {\n      userId\n    } = getState().auth;\n    const response = await streams.post(\"/streams\", { ...formValues,\n      userId\n    }); // adding the user id to formvalues to show delete/edit buttons to only logged in users\n\n    dispatch({\n      type: CREATE_STREAM,\n      payload: response.data\n    });\n    history.push(\"/\"); // forcibly navigating the user to homepage after creating the form\n  }, \"9cZfZ04734qoCGIctmKX7+sX6eU=\", false, function () {\n    return [useHistory];\n  });\n};\nexport const fetchStreams = () => async dispatch => {\n  const response = await streams.get(\"/streams\");\n  dispatch({\n    type: FETCH_STREAMS,\n    payload: response.data\n  });\n};\nexport const fetchStream = id => async dispatch => {\n  const response = await streams.get(`/streams/${id}`);\n  dispatch({\n    type: FETCH_STREAM,\n    payload: response.data\n  });\n};\nexport const editStream = (id, formValues) => async dispatch => {\n  const response = await streams.patch(`/streams/${id}`, formValues);\n  dispatch({\n    type: EDIT_STREAM,\n    payload: response.data\n  });\n  history.push(\"/\");\n};\nexport const deleteStream = id => async dispatch => {\n  await streams.delete(`/streams/${id}`);\n  dispatch({\n    type: DELETE_STREAM,\n    payload: id\n  });\n};","map":{"version":3,"sources":["/home/adnan/Documents/ReactJS-MiniProjects/Udemy-Course/streams/client/src/actions/index.js"],"names":["streams","SIGN_IN","SIGN_OUT","CREATE_STREAM","FETCH_STREAMS","FETCH_STREAM","DELETE_STREAM","EDIT_STREAM","useHistory","signIn","userId","type","payload","signOut","createStream","formValues","dispatch","getState","history","auth","response","post","data","push","fetchStreams","get","fetchStream","id","editStream","patch","deleteStream","delete"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,iBAApB;AACA,SACEC,OADF,EAEEC,QAFF,EAGEC,aAHF,EAIEC,aAJF,EAKEC,YALF,EAMEC,aANF,EAOEC,WAPF,QAQO,kBARP;AASA,SAASC,UAAT,QAA2B,kBAA3B;AAEA,OAAO,MAAMC,MAAM,GAAIC,MAAD,IAAY;AAChC,SAAO;AACLC,IAAAA,IAAI,EAAEV,OADD;AAELW,IAAAA,OAAO,EAAEF;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,MAAMG,OAAO,GAAG,MAAM;AAC3B,SAAO;AACLF,IAAAA,IAAI,EAAET;AADD,GAAP;AAGD,CAJM;AAMP,OAAO,MAAMY,YAAY,GAAIC,UAAD;AAAA;;AAAA,YAAgB,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AAAA;;AACxE,QAAIC,OAAO,GAAGV,UAAU,EAAxB;AACA,UAAM;AAAEE,MAAAA;AAAF,QAAaO,QAAQ,GAAGE,IAA9B;AACA,UAAMC,QAAQ,GAAG,MAAMpB,OAAO,CAACqB,IAAR,CAAa,UAAb,EAAyB,EAAE,GAAGN,UAAL;AAAiBL,MAAAA;AAAjB,KAAzB,CAAvB,CAHwE,CAIxE;;AACAM,IAAAA,QAAQ,CAAC;AAAEL,MAAAA,IAAI,EAAER,aAAR;AAAuBS,MAAAA,OAAO,EAAEQ,QAAQ,CAACE;AAAzC,KAAD,CAAR;AACAJ,IAAAA,OAAO,CAACK,IAAR,CAAa,GAAb,EANwE,CAOxE;AACD,GAR2B;AAAA,YACZf,UADY;AAAA;AAAA,CAArB;AAUP,OAAO,MAAMgB,YAAY,GAAG,MAAM,MAAOR,QAAP,IAAoB;AACpD,QAAMI,QAAQ,GAAG,MAAMpB,OAAO,CAACyB,GAAR,CAAY,UAAZ,CAAvB;AACAT,EAAAA,QAAQ,CAAC;AAAEL,IAAAA,IAAI,EAAEP,aAAR;AAAuBQ,IAAAA,OAAO,EAAEQ,QAAQ,CAACE;AAAzC,GAAD,CAAR;AACD,CAHM;AAKP,OAAO,MAAMI,WAAW,GAAIC,EAAD,IAAQ,MAAOX,QAAP,IAAoB;AACrD,QAAMI,QAAQ,GAAG,MAAMpB,OAAO,CAACyB,GAAR,CAAa,YAAWE,EAAG,EAA3B,CAAvB;AACAX,EAAAA,QAAQ,CAAC;AAAEL,IAAAA,IAAI,EAAEN,YAAR;AAAsBO,IAAAA,OAAO,EAAEQ,QAAQ,CAACE;AAAxC,GAAD,CAAR;AACD,CAHM;AAKP,OAAO,MAAMM,UAAU,GAAG,CAACD,EAAD,EAAKZ,UAAL,KAAoB,MAAOC,QAAP,IAAoB;AAChE,QAAMI,QAAQ,GAAG,MAAMpB,OAAO,CAAC6B,KAAR,CAAe,YAAWF,EAAG,EAA7B,EAAgCZ,UAAhC,CAAvB;AACAC,EAAAA,QAAQ,CAAC;AAAEL,IAAAA,IAAI,EAAEJ,WAAR;AAAqBK,IAAAA,OAAO,EAAEQ,QAAQ,CAACE;AAAvC,GAAD,CAAR;AACAJ,EAAAA,OAAO,CAACK,IAAR,CAAa,GAAb;AACD,CAJM;AAMP,OAAO,MAAMO,YAAY,GAAIH,EAAD,IAAQ,MAAOX,QAAP,IAAoB;AACtD,QAAMhB,OAAO,CAAC+B,MAAR,CAAgB,YAAWJ,EAAG,EAA9B,CAAN;AACAX,EAAAA,QAAQ,CAAC;AAAEL,IAAAA,IAAI,EAAEL,aAAR;AAAuBM,IAAAA,OAAO,EAAEe;AAAhC,GAAD,CAAR;AACD,CAHM","sourcesContent":["import streams from \"../apis/streams\";\nimport {\n  SIGN_IN,\n  SIGN_OUT,\n  CREATE_STREAM,\n  FETCH_STREAMS,\n  FETCH_STREAM,\n  DELETE_STREAM,\n  EDIT_STREAM,\n} from \"../actions/types\";\nimport { useHistory } from \"react-router-dom\";\n\nexport const signIn = (userId) => {\n  return {\n    type: SIGN_IN,\n    payload: userId,\n  };\n};\n\nexport const signOut = () => {\n  return {\n    type: SIGN_OUT,\n  };\n};\n\nexport const createStream = (formValues) => async (dispatch, getState) => {\n  let history = useHistory();\n  const { userId } = getState().auth;\n  const response = await streams.post(\"/streams\", { ...formValues, userId });\n  // adding the user id to formvalues to show delete/edit buttons to only logged in users\n  dispatch({ type: CREATE_STREAM, payload: response.data });\n  history.push(\"/\");\n  // forcibly navigating the user to homepage after creating the form\n};\n\nexport const fetchStreams = () => async (dispatch) => {\n  const response = await streams.get(\"/streams\");\n  dispatch({ type: FETCH_STREAMS, payload: response.data });\n};\n\nexport const fetchStream = (id) => async (dispatch) => {\n  const response = await streams.get(`/streams/${id}`);\n  dispatch({ type: FETCH_STREAM, payload: response.data });\n};\n\nexport const editStream = (id, formValues) => async (dispatch) => {\n  const response = await streams.patch(`/streams/${id}`, formValues);\n  dispatch({ type: EDIT_STREAM, payload: response.data });\n  history.push(\"/\");\n};\n\nexport const deleteStream = (id) => async (dispatch) => {\n  await streams.delete(`/streams/${id}`);\n  dispatch({ type: DELETE_STREAM, payload: id });\n};\n"]},"metadata":{},"sourceType":"module"}