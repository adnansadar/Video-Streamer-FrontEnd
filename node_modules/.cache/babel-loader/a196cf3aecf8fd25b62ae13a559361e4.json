{"ast":null,"code":"import _classCallCheck from\"/home/adnan/Documents/Video-Streaming-App/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/adnan/Documents/Video-Streaming-App/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/home/adnan/Documents/Video-Streaming-App/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/home/adnan/Documents/Video-Streaming-App/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React from\"react\";import{connect}from\"react-redux\";import{fetchStream}from\"../../actions\";import flv from\"flv.js\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var StreamShow=/*#__PURE__*/function(_React$Component){_inherits(StreamShow,_React$Component);var _super=_createSuper(StreamShow);function StreamShow(props){var _this;_classCallCheck(this,StreamShow);_this=_super.call(this,props);_this.videoRef=/*#__PURE__*/React.createRef();return _this;}_createClass(StreamShow,[{key:\"componentDidMount\",value:function componentDidMount(){var id=this.props.match.params.id;this.props.fetchStream(id);this.buildPlayer();}// if the stream is finally loaded after reloading, component will update and player building will be done again\n},{key:\"componentDidUpdate\",value:function componentDidUpdate(){this.buildPlayer();}// stopping the player after the user switches to other page/closes stream show\n},{key:\"componentWillUnmount\",value:function componentWillUnmount(){this.player.destroy();}},{key:\"buildPlayer\",value:function buildPlayer(){if(this.player||!this.props.stream){return;}var id=this.props.match.params.id;// flv acts like axios over here(read http flv documentation )\nthis.player=flv.createPlayer({type:\"flv\",url:\"http://localhost:8000/live/\".concat(id,\".flv\")});this.player.attachMediaElement(this.videoRef.current);this.player.load();}},{key:\"render\",value:function render(){if(!this.props.stream){return/*#__PURE__*/_jsx(\"div\",{children:\"Loading...\"});}var _this$props$stream=this.props.stream,title=_this$props$stream.title,description=_this$props$stream.description;return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"video\",{ref:this.videoRef,style:{width:\"100%\"},controls:true}),/*#__PURE__*/_jsx(\"h1\",{children:title}),/*#__PURE__*/_jsx(\"h5\",{children:description})]});}}]);return StreamShow;}(React.Component);var mapStateToProps=function mapStateToProps(state,ownProps){var id=ownProps.match.params.id;return{stream:state.streams[id]};};export default connect(mapStateToProps,{fetchStream:fetchStream})(StreamShow);","map":{"version":3,"sources":["/home/adnan/Documents/Video-Streaming-App/client/src/components/streams/StreamShow.js"],"names":["React","connect","fetchStream","flv","StreamShow","props","videoRef","createRef","id","match","params","buildPlayer","player","destroy","stream","createPlayer","type","url","attachMediaElement","current","load","title","description","width","Component","mapStateToProps","state","ownProps","streams"],"mappings":"4oBAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,OAAT,KAAwB,aAAxB,CACA,OAASC,WAAT,KAA4B,eAA5B,CACA,MAAOC,CAAAA,GAAP,KAAgB,QAAhB,C,2FAEMC,CAAAA,U,oHACJ,oBAAYC,KAAZ,CAAmB,4CACjB,uBAAMA,KAAN,EACA,MAAKC,QAAL,cAAgBN,KAAK,CAACO,SAAN,EAAhB,CAFiB,aAGlB,C,wDACD,4BAAoB,IACVC,CAAAA,EADU,CACH,KAAKH,KAAL,CAAWI,KAAX,CAAiBC,MADd,CACVF,EADU,CAElB,KAAKH,KAAL,CAAWH,WAAX,CAAuBM,EAAvB,EACA,KAAKG,WAAL,GACD,CAED;kCACA,6BAAqB,CACnB,KAAKA,WAAL,GACD,CAED;oCACA,+BAAuB,CACrB,KAAKC,MAAL,CAAYC,OAAZ,GACD,C,2BAED,sBAAc,CACZ,GAAI,KAAKD,MAAL,EAAe,CAAC,KAAKP,KAAL,CAAWS,MAA/B,CAAuC,CACrC,OACD,CAHW,GAIJN,CAAAA,EAJI,CAIG,KAAKH,KAAL,CAAWI,KAAX,CAAiBC,MAJpB,CAIJF,EAJI,CAKZ;AACA,KAAKI,MAAL,CAAcT,GAAG,CAACY,YAAJ,CAAiB,CAC7BC,IAAI,CAAE,KADuB,CAE7BC,GAAG,sCAAgCT,EAAhC,QAF0B,CAAjB,CAAd,CAIA,KAAKI,MAAL,CAAYM,kBAAZ,CAA+B,KAAKZ,QAAL,CAAca,OAA7C,EACA,KAAKP,MAAL,CAAYQ,IAAZ,GACD,C,sBAED,iBAAS,CACP,GAAI,CAAC,KAAKf,KAAL,CAAWS,MAAhB,CAAwB,CACtB,mBAAO,mCAAP,CACD,CAHM,uBAIwB,KAAKT,KAAL,CAAWS,MAJnC,CAICO,KAJD,oBAICA,KAJD,CAIQC,WAJR,oBAIQA,WAJR,CAKP,mBACE,oCACE,cAAO,GAAG,CAAE,KAAKhB,QAAjB,CAA2B,KAAK,CAAE,CAAEiB,KAAK,CAAE,MAAT,CAAlC,CAAqD,QAAQ,KAA7D,EADF,cAEE,oBAAKF,KAAL,EAFF,cAGE,oBAAKC,WAAL,EAHF,GADF,CAOD,C,wBA/CsBtB,KAAK,CAACwB,S,EAkD/B,GAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACC,KAAD,CAAQC,QAAR,CAAqB,IACnCnB,CAAAA,EADmC,CAC5BmB,QAAQ,CAAClB,KAAT,CAAeC,MADa,CACnCF,EADmC,CAE3C,MAAO,CAAEM,MAAM,CAAEY,KAAK,CAACE,OAAN,CAAcpB,EAAd,CAAV,CAAP,CACD,CAHD,CAKA,cAAeP,CAAAA,OAAO,CAACwB,eAAD,CAAkB,CAAEvB,WAAW,CAAXA,WAAF,CAAlB,CAAP,CAA0CE,UAA1C,CAAf","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { fetchStream } from \"../../actions\";\nimport flv from \"flv.js\";\n\nclass StreamShow extends React.Component {\n  constructor(props) {\n    super(props);\n    this.videoRef = React.createRef();\n  }\n  componentDidMount() {\n    const { id } = this.props.match.params;\n    this.props.fetchStream(id);\n    this.buildPlayer();\n  }\n\n  // if the stream is finally loaded after reloading, component will update and player building will be done again\n  componentDidUpdate() {\n    this.buildPlayer();\n  }\n\n  // stopping the player after the user switches to other page/closes stream show\n  componentWillUnmount() {\n    this.player.destroy();\n  }\n\n  buildPlayer() {\n    if (this.player || !this.props.stream) {\n      return;\n    }\n    const { id } = this.props.match.params;\n    // flv acts like axios over here(read http flv documentation )\n    this.player = flv.createPlayer({\n      type: \"flv\",\n      url: `http://localhost:8000/live/${id}.flv`,\n    });\n    this.player.attachMediaElement(this.videoRef.current);\n    this.player.load();\n  }\n\n  render() {\n    if (!this.props.stream) {\n      return <div>Loading...</div>;\n    }\n    const { title, description } = this.props.stream;\n    return (\n      <div>\n        <video ref={this.videoRef} style={{ width: \"100%\" }} controls />\n        <h1>{title}</h1>\n        <h5>{description}</h5>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  const { id } = ownProps.match.params;\n  return { stream: state.streams[id] };\n};\n\nexport default connect(mapStateToProps, { fetchStream })(StreamShow);\n"]},"metadata":{},"sourceType":"module"}