{"ast":null,"code":"var _jsxFileName = \"/home/adnan/Documents/ReactJS-MiniProjects/Udemy-Course/streams/client/src/components/streams/StreamCreate.js\";\nimport React from \"react\";\nimport { Field, reduxForm } from \"redux-form\";\nimport { createStream } from \"../../actions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass StreamCreate extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderInput = ({\n      input,\n      label,\n      meta\n    }) => {\n      const className = `field ${meta.error && meta.touched ? \"error\" : null}`;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: className,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", { ...input,\n          autoComplete: \"off\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 9\n        }, this), this.renderError(meta)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 7\n      }, this);\n    };\n  }\n\n  renderError({\n    error,\n    touched\n  }) {\n    if (touched && error) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ui error message\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"header\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 9,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 8,\n        columnNumber: 9\n      }, this);\n    }\n  }\n\n  onSubmit(formValues) {\n    console.log(formValues);\n  }\n\n  render() {\n    return (\n      /*#__PURE__*/\n      // handleSubmit is a method of redux form\n      _jsxDEV(\"form\", {\n        className: \"ui form error\",\n        onSubmit: this.props.handleSubmit(this.onSubmit),\n        children: [/*#__PURE__*/_jsxDEV(Field, {\n          name: \"title\",\n          component: this.renderInput,\n          label: \"Enter Text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Field, {\n          name: \"description\",\n          component: this.renderInput,\n          label: \"Enter Description\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"ui button primary\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 7\n      }, this)\n    );\n  }\n\n}\n\nconst validate = formValues => {\n  const errors = {}; // return empty errors object if no errors else return key value pair\n\n  if (!formValues.title) {\n    errors.title = \"You must enter a title\";\n  }\n\n  if (!formValues.description) {\n    errors.description = \"You must enter a description\";\n  }\n\n  return errors;\n};\n\nexport default reduxForm({\n  form: \"streamCreate\",\n  validate\n})(StreamCreate); // reduxForm acts like connect over here, where the form is passed as props to StreamCreate","map":{"version":3,"sources":["/home/adnan/Documents/ReactJS-MiniProjects/Udemy-Course/streams/client/src/components/streams/StreamCreate.js"],"names":["React","Field","reduxForm","createStream","StreamCreate","Component","renderInput","input","label","meta","className","error","touched","renderError","onSubmit","formValues","console","log","render","props","handleSubmit","validate","errors","title","description","form"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,SAAhB,QAAiC,YAAjC;AACA,SAASC,YAAT,QAA6B,eAA7B;;;AACA,MAAMC,YAAN,SAA2BJ,KAAK,CAACK,SAAjC,CAA2C;AAAA;AAAA;;AAAA,SAUzCC,WAVyC,GAU3B,CAAC;AAAEC,MAAAA,KAAF;AAASC,MAAAA,KAAT;AAAgBC,MAAAA;AAAhB,KAAD,KAA4B;AACxC,YAAMC,SAAS,GAAI,SAAQD,IAAI,CAACE,KAAL,IAAcF,IAAI,CAACG,OAAnB,GAA6B,OAA7B,GAAuC,IAAK,EAAvE;AACA,0BACE;AAAK,QAAA,SAAS,EAAEF,SAAhB;AAAA,gCACE;AAAA,oBAAQF;AAAR;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,sBAGMD,KAHN;AAIE,UAAA,YAAY,EAAC;AAJf;AAAA;AAAA;AAAA;AAAA,gBAFF,EAQG,KAAKM,WAAL,CAAiBJ,IAAjB,CARH;AAAA;AAAA;AAAA;AAAA;AAAA,cADF;AAYD,KAxBwC;AAAA;;AACzCI,EAAAA,WAAW,CAAC;AAAEF,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAD,EAAqB;AAC9B,QAAIA,OAAO,IAAID,KAAf,EAAsB;AACpB,0BACE;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA,+BACE;AAAK,UAAA,SAAS,EAAC,QAAf;AAAA,oBAAyBA;AAAzB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF;AAKD;AACF;;AAgBDG,EAAAA,QAAQ,CAACC,UAAD,EAAa;AACnBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,UAAZ;AACD;;AACDG,EAAAA,MAAM,GAAG;AACP;AAAA;AACE;AACA;AACE,QAAA,SAAS,EAAC,eADZ;AAEE,QAAA,QAAQ,EAAE,KAAKC,KAAL,CAAWC,YAAX,CAAwB,KAAKN,QAA7B,CAFZ;AAAA,gCAIE,QAAC,KAAD;AAAO,UAAA,IAAI,EAAC,OAAZ;AAAoB,UAAA,SAAS,EAAE,KAAKR,WAApC;AAAiD,UAAA,KAAK,EAAC;AAAvD;AAAA;AAAA;AAAA;AAAA,gBAJF,eAKE,QAAC,KAAD;AACE,UAAA,IAAI,EAAC,aADP;AAEE,UAAA,SAAS,EAAE,KAAKA,WAFlB;AAGE,UAAA,KAAK,EAAC;AAHR;AAAA;AAAA;AAAA;AAAA,gBALF,eAUE;AAAQ,UAAA,SAAS,EAAC,mBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAVF;AAAA;AAAA;AAAA;AAAA;AAAA;AAFF;AAeD;;AA5CwC;;AA+C3C,MAAMe,QAAQ,GAAIN,UAAD,IAAgB;AAC/B,QAAMO,MAAM,GAAG,EAAf,CAD+B,CAE/B;;AACA,MAAI,CAACP,UAAU,CAACQ,KAAhB,EAAuB;AACrBD,IAAAA,MAAM,CAACC,KAAP,GAAe,wBAAf;AACD;;AACD,MAAI,CAACR,UAAU,CAACS,WAAhB,EAA6B;AAC3BF,IAAAA,MAAM,CAACE,WAAP,GAAqB,8BAArB;AACD;;AACD,SAAOF,MAAP;AACD,CAVD;;AAYA,eAAepB,SAAS,CAAC;AAAEuB,EAAAA,IAAI,EAAE,cAAR;AAAwBJ,EAAAA;AAAxB,CAAD,CAAT,CAA8CjB,YAA9C,CAAf,C,CACA","sourcesContent":["import React from \"react\";\nimport { Field, reduxForm } from \"redux-form\";\nimport { createStream } from \"../../actions\";\nclass StreamCreate extends React.Component {\n  renderError({ error, touched }) {\n    if (touched && error) {\n      return (\n        <div className=\"ui error message\">\n          <div className=\"header\">{error}</div>\n        </div>\n      );\n    }\n  }\n  renderInput = ({ input, label, meta }) => {\n    const className = `field ${meta.error && meta.touched ? \"error\" : null}`;\n    return (\n      <div className={className}>\n        <label>{label}</label>\n        <input\n          // onChange={formProps.input.onChange}\n          // value={formProps.input.value}\n          {...input}\n          autoComplete=\"off\"\n        />\n        {this.renderError(meta)}\n      </div>\n    );\n  };\n  onSubmit(formValues) {\n    console.log(formValues);\n  }\n  render() {\n    return (\n      // handleSubmit is a method of redux form\n      <form\n        className=\"ui form error\"\n        onSubmit={this.props.handleSubmit(this.onSubmit)}\n      >\n        <Field name=\"title\" component={this.renderInput} label=\"Enter Text\" />\n        <Field\n          name=\"description\"\n          component={this.renderInput}\n          label=\"Enter Description\"\n        />\n        <button className=\"ui button primary\">Submit</button>\n      </form>\n    );\n  }\n}\n\nconst validate = (formValues) => {\n  const errors = {};\n  // return empty errors object if no errors else return key value pair\n  if (!formValues.title) {\n    errors.title = \"You must enter a title\";\n  }\n  if (!formValues.description) {\n    errors.description = \"You must enter a description\";\n  }\n  return errors;\n};\n\nexport default reduxForm({ form: \"streamCreate\", validate })(StreamCreate);\n// reduxForm acts like connect over here, where the form is passed as props to StreamCreate\n"]},"metadata":{},"sourceType":"module"}