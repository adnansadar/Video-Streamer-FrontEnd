{"ast":null,"code":"var _jsxFileName = \"/home/adnan/Documents/ReactJS-MiniProjects/Udemy-Course/streams/client/src/components/streams/StreamShow.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { fetchStream } from \"../../actions\";\nimport flv from \"flv.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass StreamShow extends React.Component {\n  constructor(props) {\n    super(props);\n    this.videoRef = /*#__PURE__*/React.createRef();\n  }\n\n  componentDidMount() {\n    const {\n      id\n    } = this.props.match.params;\n    this.props.fetchStream(id); // flv acts like axios over here(read http flv documentation )\n\n    this.player = flv.createPlayer({\n      type: \"flv\",\n      url: `http://localhost:8000/live/${id}.flv`\n    });\n    this.player.attachMediaElement(this.videoRef.current);\n    this.player.load();\n  }\n\n  render() {\n    if (!this.props.stream) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 14\n      }, this);\n    }\n\n    const {\n      title,\n      description\n    } = this.props.stream;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"video\", {\n        ref: this.videoRef,\n        style: {\n          width: \"100%\"\n        },\n        controls: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n        children: description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  const {\n    id\n  } = ownProps.match.params;\n  return {\n    stream: state.streams[id]\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchStream\n})(StreamShow);","map":{"version":3,"sources":["/home/adnan/Documents/ReactJS-MiniProjects/Udemy-Course/streams/client/src/components/streams/StreamShow.js"],"names":["React","connect","fetchStream","flv","StreamShow","Component","constructor","props","videoRef","createRef","componentDidMount","id","match","params","player","createPlayer","type","url","attachMediaElement","current","load","render","stream","title","description","width","mapStateToProps","state","ownProps","streams"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,OAAOC,GAAP,MAAgB,QAAhB;;;AAEA,MAAMC,UAAN,SAAyBJ,KAAK,CAACK,SAA/B,CAAyC;AACvCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,QAAL,gBAAgBR,KAAK,CAACS,SAAN,EAAhB;AACD;;AACDC,EAAAA,iBAAiB,GAAG;AAClB,UAAM;AAAEC,MAAAA;AAAF,QAAS,KAAKJ,KAAL,CAAWK,KAAX,CAAiBC,MAAhC;AACA,SAAKN,KAAL,CAAWL,WAAX,CAAuBS,EAAvB,EAFkB,CAGlB;;AACA,SAAKG,MAAL,GAAcX,GAAG,CAACY,YAAJ,CAAiB;AAC7BC,MAAAA,IAAI,EAAE,KADuB;AAE7BC,MAAAA,GAAG,EAAG,8BAA6BN,EAAG;AAFT,KAAjB,CAAd;AAIA,SAAKG,MAAL,CAAYI,kBAAZ,CAA+B,KAAKV,QAAL,CAAcW,OAA7C;AACA,SAAKL,MAAL,CAAYM,IAAZ;AACD;;AACDC,EAAAA,MAAM,GAAG;AACP,QAAI,CAAC,KAAKd,KAAL,CAAWe,MAAhB,EAAwB;AACtB,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AACD;;AACD,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAyB,KAAKjB,KAAL,CAAWe,MAA1C;AACA,wBACE;AAAA,8BACE;AAAO,QAAA,GAAG,EAAE,KAAKd,QAAjB;AAA2B,QAAA,KAAK,EAAE;AAAEiB,UAAAA,KAAK,EAAE;AAAT,SAAlC;AAAqD,QAAA,QAAQ;AAA7D;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA,kBAAKF;AAAL;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAA,kBAAKC;AAAL;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAOD;;AA5BsC;;AA+BzC,MAAME,eAAe,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAC3C,QAAM;AAAEjB,IAAAA;AAAF,MAASiB,QAAQ,CAAChB,KAAT,CAAeC,MAA9B;AACA,SAAO;AAAES,IAAAA,MAAM,EAAEK,KAAK,CAACE,OAAN,CAAclB,EAAd;AAAV,GAAP;AACD,CAHD;;AAKA,eAAeV,OAAO,CAACyB,eAAD,EAAkB;AAAExB,EAAAA;AAAF,CAAlB,CAAP,CAA0CE,UAA1C,CAAf","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { fetchStream } from \"../../actions\";\nimport flv from \"flv.js\";\n\nclass StreamShow extends React.Component {\n  constructor(props) {\n    super(props);\n    this.videoRef = React.createRef();\n  }\n  componentDidMount() {\n    const { id } = this.props.match.params;\n    this.props.fetchStream(id);\n    // flv acts like axios over here(read http flv documentation )\n    this.player = flv.createPlayer({\n      type: \"flv\",\n      url: `http://localhost:8000/live/${id}.flv`,\n    });\n    this.player.attachMediaElement(this.videoRef.current);\n    this.player.load();\n  }\n  render() {\n    if (!this.props.stream) {\n      return <div>Loading...</div>;\n    }\n    const { title, description } = this.props.stream;\n    return (\n      <div>\n        <video ref={this.videoRef} style={{ width: \"100%\" }} controls />\n        <h1>{title}</h1>\n        <h5>{description}</h5>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  const { id } = ownProps.match.params;\n  return { stream: state.streams[id] };\n};\n\nexport default connect(mapStateToProps, { fetchStream })(StreamShow);\n"]},"metadata":{},"sourceType":"module"}